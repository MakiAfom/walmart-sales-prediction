# -*- coding: utf-8 -*-
"""RAMA_BA_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D3WQlRuHb6LsW2M2DwRzFtd6T-QpS2Iz
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

Data = pd.read_excel("/content/Walmart_sales.xlsx")

Data.head()

Data.describe()

"""The features are potential candidates:


*   Store: This represents the store number.
*   Holiday_Flag: A binary flag indicating whether the week includes a holiday.

*   Temperature: The average temperature during the week.
*   Fuel_Price: The fuel price during the week.

*   CPI (Consumer Price Index): A measure of inflation and consumer spending.
*   Unemployment: The unemployment rate during the week.

"""

sns.boxplot(x='Temperature', y='Weekly_Sales', data=Data)
plt.xlabel('Temperature')
plt.ylabel('Weekly_Sales')
plt.title('Box Plot of Weekly_Sales by Temperature')
plt.show()

"""# New Section"""

plt.scatter(Data['Temperature'], Data['Weekly_Sales'])
plt.xlabel('Temperature')
plt.ylabel('Weekly_Sales')
plt.title('Scatter Plot of Weekly Sales by Temperature')
plt.show()

# @title Date vs Temperature

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Date']
  ys = series['Temperature']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = Data.sort_values('Date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Date')
_ = plt.ylabel('Temperature')



Data.isnull().sum()

Data.drop_duplicates()

Data['Date'] = pd.to_datetime(Data['Date'])

Data.head()

Data['Month'] = Data['Date'].dt.month
Data['Year'] = Data['Date'].dt.year

average_sales_per_month = Data.groupby('Month')['Weekly_Sales'].mean()

plt.figure(figsize=(10, 6))
plt.bar(average_sales_per_month.index, average_sales_per_month.values, color='skyblue')
plt.xlabel('Month')
plt.ylabel('Average Weekly Sales')
plt.title('Average Weekly Sales per Month')
plt.xticks(range(1, 13), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

yearly_average = Data.groupby(Data['Date'].dt.to_period('Y'))['Weekly_Sales'].mean()

yearly_average

average_sales = Data.groupby(['Year', 'Month'])['Weekly_Sales'].mean()

# Separate DataFrames for each year
df_2010 = average_sales.loc[2010]
df_2011 = average_sales.loc[2011]
df_2012 = average_sales.loc[2012]

# Plotting
plt.figure(figsize=(10, 6))

plt.bar(df_2010.index, df_2010.values, label='2010', color='yellow')
plt.bar(df_2011.index, df_2011.values, label='2011', color='orange')
plt.bar(df_2012.index, df_2012.values, label='2012', color='skyblue')

plt.xlabel('Month')
plt.ylabel('Average Weekly Sales')
plt.title('Average Weekly Sales per Month (2010-2012)')
plt.legend()
plt.xticks(rotation=45)

plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(Data['Weekly_Sales'], bins=20, kde=True, color='skyblue')
plt.xlabel('Weekly Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Weekly Sales')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Temperature', y='Weekly_Sales', data= Data)
plt.xlabel('Temperature')
plt.ylabel('Weekly Sales')
plt.title('Temperature vs. Weekly Sales')
plt.show()

from sklearn.linear_model import LinearRegression

X = Data[['Temperature']]
y = Data['Weekly_Sales']

model = LinearRegression()
model.fit(X, y)

r_squared = model.score(X, y)
print(f"R-squared: {r_squared:.4f}")

from scipy.stats import pearsonr

correlation_coefficient, p_value = pearsonr(Data['Temperature'], Data['Weekly_Sales'])
print(f"P-value: {p_value:.4f}")

# Calculate Pearson correlation and p-value
correlation_coefficient, p_value = pearsonr(Data['Temperature'], Data['Weekly_Sales'])
print(f"P-value: {p_value:.4f}")

# Get the model coefficients
coefficient = model.coef_
print("Coefficients:", coefficient)

coefficient = model.coef_
print("Coefficients:", coefficient)



"""An R-squared value of 0.0041 (or 0.41%) indicates that only about 0.41% of the variation in weekly sales can be explained by changes in temperature alone.
In other words, temperature has a very weak association with weekly sales in current model.
"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Temperature', y='Weekly_Sales', data=Data)
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.xlabel('Temperature')
plt.ylabel('Weekly Sales')
plt.title('Temperature vs. Weekly Sales with Regression Line')
plt.legend()
plt.show()



plt.figure(figsize=(10, 6))
plt.bar(Data['Date'], Data['Holiday_Flag'], color='blue')
plt.xlabel('Date')
plt.ylabel('Holiday Flag (1: Holiday, 0: Not a Holiday)')
plt.title('Holiday Flag over Time')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Holiday_Flag', y='Weekly_Sales', data= Data)
plt.xlabel('Holiday_Flag')
plt.ylabel('Weekly Sales')
plt.title('Holiday_Flag vs. Weekly Sales')
plt.show()

import seaborn as sns

# Example data (replace with your actual data)
correlation_data = Data[['Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']]

# Calculate correlations
corr_matrix = correlation_data.corr()

# Create a heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(Data['Date'], Data['Weekly_Sales'], marker='o', linestyle='-', color='skyblue')
plt.xlabel('Date')
plt.ylabel('Weekly Sales')
plt.title('Weekly Sales over Time')
plt.grid(True)
plt.show()

# Calculate average weekly sales for holiday and non-holiday periods
average_sales_holiday = Data[Data['Holiday_Flag'] == 1]['Weekly_Sales'].mean()
average_sales_non_holiday = Data[Data['Holiday_Flag'] == 0]['Weekly_Sales'].mean()

# Create a bar chart
plt.figure(figsize=(8, 6))
plt.bar(['Holiday', 'Non-Holiday'], [average_sales_holiday, average_sales_non_holiday], color=['gold', 'skyblue'])
plt.xlabel('Holiday Flag')
plt.ylabel('Average Weekly Sales')
plt.title('Average Weekly Sales: Holiday vs. Non-Holiday')
plt.show()

plt.figure(figsize=(8, 6))
plt.bar(Data['Store'], Data['Weekly_Sales'], color='skyblue')
plt.xlabel('Store')
plt.ylabel('Total Weekly Sales')
plt.title('Total Weekly Sales per Store')
plt.show()

X_1 = Data[['Store' ,	'Holiday_Flag',	'Fuel_Price',	'CPI',	'Unemployment',	'Temperature']]
y_1 = Data['Weekly_Sales']

model_1 = LinearRegression()
model_1.fit(X_1, y_1)

r_squared = model_1.score(X_1, y_1)
print(f"R-squared: {r_squared:.4f}")

# Coefficients for each feature
coefficients = model_1.coef_
print("Coefficients:", coefficients)

# Calculate Pearson correlation and p-value
correlation_coefficient, p_value = pearsonr(Data['Holiday_Flag'], Data['Weekly_Sales'])
print(f"P-value: {p_value:.4f}")

